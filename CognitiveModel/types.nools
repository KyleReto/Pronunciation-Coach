define Problem {
	word: null,
	chunks: null,
	vowelIndices: null,
	subgoal: null,
	breakIndices: null,
	constructor: function(word='') {
		this.word = word;
		this.subgoal = 'enterWord';
		this.vowelIndices = [];
		this.chunks = [];
		this.breakIndices = [];
	}
}

define VowelLocation {
	index: null,
	isFound: null,
	ieCheck: null,
	constructor: function(index, ieCheck) {
		this.index = index;
		this.ieCheck = ieCheck;
		this.isFound = false;
	}
}

/* Currently Unused;  may be useful in future
define ConsonantLocation {
	index: null,
	ieCheck: null,
	constructor: function(index, ieCheck) {
		this.index = index;
		this.ieCheck = ieCheck;
	}
}*/

define BreakLocation {
	index: null,
	isFound: null,
	ieCheck: null,
	constructor: function(index, ieCheck){
		this.index = index;
		this.isFound = false;
		this.ieCheck = ieCheck;
	}
}

define ChunkType {
	chunkValue: null,
	isFound: null,
	ieSelect: null,
	constructor: function(chunkValue, ieSelect){
		this.chunkValue = chunkValue;
		this.isFound = false;
		this.ieSelect = ieSelect;
	}
}
/* Currently Unused
define interfaceElement {
	ieName: null,
	value: null,
	constructor: function(n, v) {
		this.ieName = n;
		this.value = v;
	}
}*/

define StudentValues {
	selection: null,
	action: null,
	input: null,
	constructor: function(s,a,i) {
		this.selection = s;
		this.action = a;
		this.input = i;
	}
}

define TPA {
	selection: null,
	action: null,
	input: null,
	constructor: function(s, a, i) {
		this.selection = s;
		this.action = a;
		this.input = i;
	}
}

define Hint {
	precedence: 0,
	msg: "",
	constructor: function(m, optPrecedence) {
		this.msg = m;
		this.precedence = optPrecedence || 0;
	}
}

define Skill {
	name: null,
	category: null,
	constructor: function(n, c) {
		this.name = n;
		this.category = c;
  	}
}

define IsHintMatch {
	constructor: function() {
	}
}
