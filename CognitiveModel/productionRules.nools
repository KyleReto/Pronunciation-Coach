import("types.nools");

// helper functions here
function getVowelIndices(word){
	let indices = [];
	let vowels = ['A', 'E', 'I', 'O', 'U', 'Y'];
	for(var i=0; i < word.length; i++) {
		if (vowels.includes(word[i].toUpperCase())){
			indices.push(i);
		}
	}
	return indices;
}


rule Bootstrap {
	when {
		bool : Boolean bool == false from false;
	}
	then {
		let indices = getVowelIndices(word);
		for (let i = 0; i < indices.length; i++){
			assert(new VowelLocation(indices[i]));
		}
		let prob = assert(new Problem(word,[2,4], ['Closed', 'Open', 'Neither']));
		/*modify(prob, "subgoal", "findVowels");
		startStep(2);*/
		modify(prob, "subgoal", "enterWord");
		startStep(1);
		generateVowelId(prob.word);

		setProblemAttribute("use_backtracking", true);
		setProblemAttribute("use_hint_fact", true);
		halt();
	}
}

// STAGE 1: ENTER A VALID WORD (enterWord)
rule enterWord {
	when {
		prob: Problem prob.subgoal === "enterWord";
		vowelLocation: VowelLocation !vowelLocation.isFound {ie: ieName};
	}
	then {
		let entry = $('#wordEntryInput').val();
		if (entry.indexOf(' ') == -1 && checkSAI({selection: 'submitButton', action: "ButtonPressed", input: '-1'})) {
			modify(prob, "word", $('#wordEntryInput').val());
			logToAttempts('#wordEntryContainer');
			generateVowelId(prob.word);
			startStep(2);
			halt();
		} else {
			backtrack();
		}
	}
}

// STAGE 2: IDENTIFY VOWELS (findVowels)

rule findSimpleVowels {
	when {
		prob: Problem prob.subgoal === "findVowels";
		vowelLocation: VowelLocation !vowelLocation.isFound {ie: ieName};
	}
	then {
		if (checkSAI({selection: 'vowelInputName' + vowelLocation.index, action: "UpdateCheckBox", input: 'vowelInput' + vowelLocation.index + ': true'})) {
			modify(vowelLocation, "isFound", "true");
			console.log('Found vowel at index ' + vowelLocation.index);
			halt();
		} else {
			backtrack();
		}
	}
}

rule doneFindingVowels {
	salience: -5;
	when {
		prob: Problem prob.subgoal === "findVowels";
		not(vowelLocation: VowelLocation !vowelLocation.isFound);
	}
	then {
		if(checkSAI({selection: 'submitButton', action: "ButtonPressed", input: '-1'})){
			modify(prob, "subgoal", "breakWord");
			logToAttempts('#vowelIdContainer');
			startStep(3);
		}
	}
}

// STAGE 3: BREAK THE WORD (breakWord)

// STAGE 4: ASSIGN OPEN/CLOSED (openClosed)

// TODO: Done rule